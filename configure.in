dnl Process this file with autoconf to produce a configure script.

AC_INIT(install-sh)
AC_PREREQ([2.50])
AC_CONFIG_HEADER(config.h)

AC_SUBST(NETLIBS)
AC_SUBST(PL)
AC_SUBST(PLLIBS)
AC_SUBST(PLBASE)
AC_SUBST(PLARCH)
AC_SUBST(BOOTPL)
AC_SUBST(PLINCLUDE)
AC_SUBST(CIFLAGS)
AC_SUBST(COFLAGS)
AC_SUBST(CWFLAGS)
AC_SUBST(CMFLAGS)
AC_SUBST(ETAGS)
AC_SUBST(LD)
AC_SUBST(SO)
AC_SUBST(LDSOFLAGS)
AC_SUBST(SONAMEFLAG)
AC_SUBST(SOWHOLEARCHIVE)
AC_SUBST(LD_RUN_PATH)

if test -z "$LIBDB"; then LIBDB=db; fi
if test -z "$CIFLAGS" -a ! -z "$CPPFLAGS"; then CIFLAGS="$CPPFLAGS"; fi

AC_ARG_ENABLE(mt, [  --enable-mt		  Enable Multi-threading],
	      [case "$enableval" in
		   yes) AC_DEFINE(_REENTRANT, 1,
				  [Define to enable multi-threading])
			;;
		   *)  ;;
	       esac])

AC_ARG_WITH(db, [  --with-db=DIR           DIR holding DB installation],
	    [ case $withval in
		no|yes) echo 'Please specify dir holding DB'
			exit 1
			;;
		*)	CIFLAGS="-I$withval/include $CIFLAGS"
		        CPPFLAGS="-I$withval/include $CPPFLAGS"
		        LIBS="-L$withval/lib $LIBS"
			LDFLAGS="-L$withval/lib $LDFLAGS"
			if test -z "$LD_RUN_PATH"; then
			  LD_RUN_PATH="$withval/lib"
			else
			  LD_RUN_PATH="$withval/lib:$LD_RUN_PATH"
			fi
			;;
              esac
	    ])

AC_PROG_CC
LD="$CC -v"

if test -z "$PLINCL"; then
plcandidates="$with_prolog swi-prolog swipl pl"
AC_CHECK_PROGS(PL, $plcandidates, "none")
AC_CHECK_PROGS(PLLD, plld, "none")
if test $PLLD = "none"; then
   AC_ERROR("Cannot find SWI-Prolog plld utility. SWI-Prolog must be installed first")
fi
if test $PL = "none"; then
   AC_ERROR("Cannot find SWI-Prolog. SWI-Prolog must be installed first")
else
   AC_CHECKING("Running $PL -dump-runtime-variables")
   eval `$PL -dump-runtime-variables`
fi
if test "$PLSHARED" = "yes"; then
   MAKE_SHARED_OBJECT=yes
fi
AC_MSG_RESULT("		PLBASE=$PLBASE")
AC_MSG_RESULT("		PLARCH=$PLARCH")
AC_MSG_RESULT("		PLLIBS=$PLLIBS")
AC_MSG_RESULT("		PLLDFLAGS=$PLLDFLAGS")
AC_MSG_RESULT("		MAKE_SHARED_OBJECT=$MAKE_SHARED_OBJECT")
else
PLLD=../plld.sh
PL=../pl.sh
fi

CC=$PLLD
LD=$PLLD
LDSOFLAGS=-shared
CMFLAGS=-fpic
SO="$PLSOEXT"

AC_CHECK_PROGS(MAKE, gmake make, "make")
AC_CHECK_PROGS(ETAGS, etags ctags, ":")
AC_PROG_INSTALL
AC_PROG_CPP
AC_ISC_POSIX
AC_HEADER_STDC

if test ! -z "$GCC"; then
    COFLAGS="${COFLAGS--O2 -fno-strict-aliasing}"
    CWFLAGS="${CWFLAGS--Wall}"
else
    COFLAGS="${COFLAGS--O}"
fi

CFLAGS="$CMFLAGS $CIFLAGS"
AC_FUNC_ALLOCA
AC_C_BIGENDIAN

AC_CHECK_LIB(socket, socket,
	     [NETLIBS="$NETLIBS -lsocket"; LIBS="$LIBS -lsocket"]
	     AC_DEFINE(HAVE_LIBSOCKET, 1,
		       [Define if socket is in library socket]))
AC_CHECK_LIB(nsl, t_bind,
	     [NETLIBS="$NETLIBS -lnsl"]
	     AC_DEFINE(HAVE_LIBNSL, 1,
		       [Define if you have the nsl library]))

AC_CHECK_HEADERS(db.h)
AC_MSG_CHECKING(db_create in -ldb)
LIBS="-l$LIBDB $LIBS"
AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <db.h>]],
				[[db_create(0,0,0)]])],
	       [HAVEDB=yes
	        AC_MSG_RESULT(yes)
	       ],
	       [HAVEDB=no
	        AC_MSG_RESULT(no)
	       ])

AC_MSG_CHECKING(Whether environment is sane)
if test "$HAVEDB" = "yes"; then
   AC_MSG_RESULT(library ok);
else
   AC_MSG_RESULT(Cannot find db library.  Aborted);
   exit 1
fi

AC_MSG_CHECKING(Whether environment is sane)
if test "$ac_cv_header_db_h" = yes ; then
   AC_MSG_RESULT(header ok);
else
   AC_MSG_RESULT(Cannot find db.h.  Aborted);
   exit 1
fi

AC_MSG_CHECKING("set_rpc_server() in db_env")
AC_TRY_COMPILE(
[
#include <db.h>
],
[ DB_ENV *db_env;

  db_env->set_rpc_server(db_env, 0, "localhost", 0L, 0L, 0);
], AC_DEFINE(HAVE_SET_RPC_SERVER, 1,
	     [Define if db_env provides set_rpc_server])
   AC_MSG_RESULT(yes),
   AC_MSG_RESULT(no))

AC_OUTPUT(Makefile)




